import React, { useState, useMemo, useEffect } from 'react';
import { BsGraphUp, BsShieldCheck, BsSliders, BsStars, BsTable, BsGear, BsInfoCircle, BsPencil, BsArrowRight, BsFunnel } from "react-icons/bs";
import { Bar, Line, Doughnut } from 'react-chartjs-2';
import {
  Chart as ChartJS, CategoryScale, LinearScale, BarElement, PointElement, LineElement, ArcElement, Title, Tooltip, Legend, Filler
} from 'chart.js';

ChartJS.register(CategoryScale, LinearScale, BarElement, PointElement, LineElement, ArcElement, Title, Tooltip, Legend, Filler);

// --- Professional Currency Formatter (Indian Standard) ---
const formatCurrency = (value) => {
  if (value === 0) return '₹0';
  const isNegative = value < 0;
  const absValue = Math.abs(value);
  let formattedValue;
  if (absValue >= 10000000) formattedValue = `₹${(absValue / 10000000).toFixed(2)} Cr`;
  else if (absValue >= 100000) formattedValue = `₹${(absValue / 100000).toFixed(2)} L`;
  else formattedValue = `₹${Math.round(absValue).toLocaleString('en-IN')}`;
  return isNegative ? `-${formattedValue}` : formattedValue;
};

// --- MOCK DATA & INITIAL STATE ---
const initialAdjustmentData = [
  { id: 'e1', department: 'Marketing', category: 'Digital Ads', baseBudget: 12000000, sensitivity: 10, justification: 'High correlation with lead gen.', manualAdjustment: null },
  { id: 'e2', department: 'HR', category: 'Sales Ops Hiring', baseBudget: 8000000, sensitivity: 5, justification: 'Support for new sales reps.', manualAdjustment: null },
  { id: 'e3', department: 'Sales', category: 'Travel & Events', baseBudget: 9000000, sensitivity: 8, justification: 'Client-facing activities.', manualAdjustment: null },
  { id: 'e4', department: 'IT', category: 'SaaS Licenses (Sales)', baseBudget: 4500000, sensitivity: 3, justification: 'Per-seat license costs.', manualAdjustment: null },
  { id: 'e5', department: 'R&D', category: 'Core Product', baseBudget: 25000000, sensitivity: 0, justification: 'Fixed roadmap spend.', manualAdjustment: null },
];
const baseRevenueBudget = 250000000;
const departmentColors = { 'Marketing': '#8b5cf6', 'HR': '#ec4899', 'Sales': '#3b82f6', 'IT': '#6366f1', 'R&D': '#10b981' };


const SalesGrowthBudgetAdjustments = () => {
  const [salesGrowth, setSalesGrowth] = useState(14.2); // YoY Growth %
  const [adjustments, setAdjustments] = useState(initialAdjustmentData);
  const [activeTab, setActiveTab] = useState('adjustments');

  const handleSensitivityChange = (id, value) => {
    setAdjustments(prev => prev.map(item => (item.id === id ? { ...item, sensitivity: parseFloat(value) || 0, manualAdjustment: null } : item)));
  };
  
  const handleManualAdjustmentChange = (id, value) => {
      setAdjustments(prev => prev.map(item => (item.id === id ? { ...item, manualAdjustment: value === '' ? null : parseFloat(value) || 0 } : item)));
  };

  // ** THE FIX IS HERE **
  // We need to deconstruct scenarioGridData from the useMemo result.
  const { kpis, calculatedAdjustments, charts, scenarioGridData } = useMemo(() => {
    const revenueVariance = baseRevenueBudget * (salesGrowth / 100);
    let responsiveBudgetPool = 0;
    let totalAdjustment = 0;

    const finalCalculatedAdjustments = adjustments.map(item => {
        responsiveBudgetPool += item.baseBudget;
        const calculatedAdjustment = item.baseBudget * (item.sensitivity / 100) * (salesGrowth / 5);
        const finalAdjustment = item.manualAdjustment !== null ? item.manualAdjustment : calculatedAdjustment;
        const newBudget = item.baseBudget + finalAdjustment;
        totalAdjustment += finalAdjustment;
        return { ...item, adjustment: finalAdjustment, newBudget };
    });
    
    const compositionData = finalCalculatedAdjustments.reduce((acc, item) => {
        acc[item.department] = (acc[item.department] || 0) + item.newBudget;
        return acc;
    }, {});

    // ** AND HERE **
    // The calculation for scenarioGridData needs to exist.
    const scenarioData = adjustments.map(item => {
        const stretchAdj = item.baseBudget * (item.sensitivity / 100) * (20 / 5);
        const conservativeAdj = item.baseBudget * (item.sensitivity / 100) * (-5 / 5);
        return {
            category: `${item.department}: ${item.category}`,
            baseBudget: item.baseBudget,
            stretchBudget: item.baseBudget + stretchAdj,
            conservativeBudget: item.baseBudget + conservativeAdj,
        }
    });

    return {
      kpis: { revenueVariance, responsiveBudgetPool, totalAdjustment },
      calculatedAdjustments: finalCalculatedAdjustments,
      scenarioGridData: scenarioData, // It must be returned from the hook.
      charts: {
        budgetAllocation: {
            labels: finalCalculatedAdjustments.map(item => item.category),
            datasets: [{ label: 'Base Budget', data: finalCalculatedAdjustments.map(item => item.baseBudget), backgroundColor: 'rgba(100, 116, 139, 0.6)'}, { label: 'Adjusted Budget', data: finalCalculatedAdjustments.map(item => item.newBudget), backgroundColor: 'rgba(59, 130, 246, 0.8)'}]
        },
        composition: {
            labels: Object.keys(compositionData),
            datasets: [{ data: Object.values(compositionData), backgroundColor: Object.keys(compositionData).map(dept => departmentColors[dept] || '#ccc'), borderColor: '#fff', borderWidth: 4 }]
        }
      }
    };
  }, [salesGrowth, adjustments]);

  const growthColor = salesGrowth > 15 ? '--range-color: #22c55e;' : salesGrowth > 5 ? '--range-color: #3b82f6;' : ' --range-color: #f59e0b;';

  return (
    <div className="p-6 bg-sky-50/50 min-h-screen font-sans">
        <style>{`.range-color { ${growthColor} }`}</style>
      <div className="bg-gradient-to-r from-[#004a80] to-[#cfe6f7] p-5 rounded-xl shadow-md mb-6">
        <div className="flex justify-between items-center">
            <div><h1 className="text-xl font-bold text-white">Sales Growth-Linked Budget Adjustments</h1><p className="text-sky-100 text-sm mt-1">Dynamically recalibrate budgets based on revenue performance.</p></div>
        </div>
      </div>

      <div className="bg-white p-6 rounded-xl border border-slate-200 shadow-sm mb-6">
          <h3 className="text-lg font-semibold text-slate-800 flex items-center gap-2 mb-4"><BsSliders className="text-sky-600"/> Elastic Budget Simulator</h3>
          <div className="flex items-center gap-6">
              <label className="font-medium text-slate-700 w-48 shrink-0">Projected Sales Growth (YoY)</label>
              <input 
                type="range" min="-10" max="30" step="0.1" value={salesGrowth} 
                onChange={e => setSalesGrowth(parseFloat(e.target.value))} 
                className="w-full h-2 bg-slate-200 rounded-lg appearance-none cursor-pointer range-color"
              />
              <span className="font-bold text-2xl text-sky-700 w-28 text-center bg-sky-100/70 rounded-lg p-2">{salesGrowth.toFixed(1)}%</span>
          </div>
      </div>

      <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-5 mb-6">
          <div className="bg-white p-4 rounded-xl shadow-sm border"><p className="text-sm font-semibold text-slate-600">Revenue Variance</p><p className="text-2xl font-bold text-slate-800 mt-1">{formatCurrency(kpis.revenueVariance)}</p></div>
          <div className="bg-white p-4 rounded-xl shadow-sm border"><p className="text-sm font-semibold text-slate-600">Responsive Budget Pool</p><p className="text-2xl font-bold text-slate-800 mt-1">{formatCurrency(kpis.responsiveBudgetPool)}</p></div>
          <div className="bg-white p-4 rounded-xl shadow-sm border"><p className="text-sm font-semibold text-slate-600">Total Budget Adjustment</p><p className={`text-2xl font-bold mt-1 ${kpis.totalAdjustment >= 0 ? 'text-green-600' : 'text-red-600'}`}>{kpis.totalAdjustment >= 0 ? '+' : ''}{formatCurrency(kpis.totalAdjustment)}</p></div>
      </div>
      
      <div className="mb-6 border-b border-slate-200">
        <nav className="flex space-x-2">
          {['adjustments', 'visualization', 'scenarios'].map(tab => (
            <button key={tab} onClick={() => setActiveTab(tab)} className={`px-4 py-2 text-sm font-semibold rounded-t-lg transition-colors ${activeTab === tab ? 'bg-white text-sky-700 border-slate-200 border-b-white border-l border-r border-t -mb-px' : 'text-slate-500 hover:text-slate-700'}`}>
              {tab === 'adjustments' && <><BsPencil className="inline mr-2" />Adjustments</>}
              {tab === 'visualization' && <><BsGraphUp className="inline mr-2" />Visualization</>}
              {tab === 'scenarios' && <><BsTable className="inline mr-2" />Scenarios</>}
            </button>
          ))}
        </nav>
      </div>

      <div className="bg-white rounded-xl shadow-sm border border-slate-200 p-1">
      {activeTab === 'adjustments' && (
        <div className="overflow-x-auto">
          <table className="w-full text-sm">
            <thead className="text-xs text-slate-500 uppercase bg-slate-100">
              <tr>
                <th className="px-4 py-3 text-left w-1/4 font-semibold">Expense Line Item</th>
                <th className="px-4 py-3 text-center w-[15%] font-semibold">Sensitivity (%)</th>
                <th className="px-4 py-3 text-right font-semibold">Base Budget</th>
                <th className="px-4 py-3 text-right font-semibold">Adjustment</th>
                <th className="px-4 py-3 text-right font-semibold">New Budget</th>
              </tr>
            </thead>
            <tbody>
              {calculatedAdjustments.map((item, index) => (
                <tr key={item.id} className={`border-t border-slate-100 ${index % 2 !== 0 ? 'bg-slate-50/70' : 'bg-white'}`}>
                  <td className="px-4 py-3 font-medium text-slate-800">
                    <div className="flex items-center gap-2">
                        <span className="w-2 h-2 rounded-full" style={{backgroundColor: departmentColors[item.department]}}></span>
                        <span>{item.department}: {item.category}</span>
                    </div>
                  </td>
                  <td className="px-4 py-3 text-center">
                    <input type="number" value={item.sensitivity} onChange={e => handleSensitivityChange(item.id, e.target.value)} className="w-20 text-center font-semibold bg-white rounded-md p-1.5 border border-slate-300 focus:ring-2 focus:ring-sky-500 focus:border-sky-500"/>
                  </td>
                  <td className="px-4 py-3 text-right font-mono text-slate-500">{formatCurrency(item.baseBudget)}</td>
                  <td className="px-4 py-3 text-right">
                    <div className="relative flex justify-end items-center">
                        <span className="font-mono text-slate-400 mr-1.5">₹</span>
                        <input type="number" value={item.manualAdjustment !== null ? item.manualAdjustment : item.adjustment.toFixed(0)} onChange={e => handleManualAdjustmentChange(item.id, e.target.value)} className={`w-28 text-right font-mono font-semibold rounded-md p-1.5 border ${item.manualAdjustment !== null ? 'bg-amber-100/50 border-amber-400' : 'bg-slate-100 border-slate-300'} focus:bg-white focus:ring-2 focus:ring-sky-500`} />
                    </div>
                  </td>
                  <td className="px-4 py-3 text-right font-mono font-bold text-slate-900">{formatCurrency(item.newBudget)}</td>
                </tr>
              ))}
            </tbody>
          </table>
        </div>
      )}

      {activeTab === 'visualization' && (
        <div className="grid grid-cols-1 lg:grid-cols-2 gap-6 p-5">
          <div className="bg-slate-50/50 p-4 rounded-lg border">
            <h3 className="text-lg font-semibold text-slate-800 mb-4">Budget Allocation Comparison</h3>
            <div className="h-80"><Bar data={charts.budgetAllocation} options={{responsive: true, maintainAspectRatio: false, scales: {y: {ticks: {callback: v => formatCurrency(v)}}}}}/></div>
          </div>
          <div className="bg-slate-50/50 p-4 rounded-lg border">
            <h3 className="text-lg font-semibold text-slate-800 mb-4">New Budget Composition</h3>
            <div className="h-80 flex justify-center items-center"><div className="w-full max-w-[300px]"><Doughnut data={charts.composition} options={{responsive: true, maintainAspectRatio: true, plugins: {legend: {position: 'bottom'}}}} /></div></div>
          </div>
        </div>
      )}
      
       {activeTab === 'scenarios' && (
        <div className="p-5">
           <h3 className="text-lg font-semibold text-slate-800 mb-4">Scenario Impact Grid</h3>
           <p className="text-sm text-slate-600 mb-4">Compare how your budget automatically adjusts under different pre-defined growth scenarios.</p>
            <div className="overflow-x-auto">
              <table className="w-full text-sm">
                <thead className="text-xs text-slate-500 uppercase bg-slate-100">
                  <tr>
                    <th className="px-4 py-3 text-left font-semibold">Expense Category</th>
                    <th className="px-4 py-3 text-right font-semibold">Base</th>
                    <th className="px-4 py-3 text-right font-semibold">Stretch (+20%)</th>
                    <th className="px-4 py-3 text-right font-semibold">Conservative (-5%)</th>
                  </tr>
                </thead>
                <tbody className="divide-y divide-slate-200">
                  {scenarioGridData.map((item, index) => (
                    <tr key={item.category} className={`${index % 2 !== 0 ? 'bg-slate-50/70' : 'bg-white'}`}>
                      <td className="px-4 py-3 font-medium text-slate-700">{item.category}</td>
                      <td className="px-4 py-3 text-right font-mono">{formatCurrency(item.baseBudget)}</td>
                      <td className="px-4 py-3 text-right font-mono text-green-600">
                        {formatCurrency(item.stretchBudget)}
                        <div className="text-xs text-green-500">
                          (+{((item.stretchBudget - item.baseBudget)/item.baseBudget*100).toFixed(1)}%)
                        </div>
                      </td>
                      <td className="px-4 py-3 text-right font-mono text-red-600">
                        {formatCurrency(item.conservativeBudget)}
                        <div className="text-xs text-red-500">
                          ({((item.conservativeBudget - item.baseBudget)/item.baseBudget*100).toFixed(1)}%)
                        </div>
                      </td>
                    </tr>
                  ))}
                </tbody>
              </table>
            </div>
        </div>
      )}
      </div>
    </div>
  );
};

export default SalesGrowthBudgetAdjustments;